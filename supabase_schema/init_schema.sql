-- ========== TABLES ==========

-- Profiles Table
create table if not exists profiles (
  id uuid primary key,
  email text,
  full_name text,
  avatar_url text,
  created_at timestamptz default now(),
  bio text,
  phone text,
  note text,
  show_in_reem_youth boolean default false
);

-- Posts Table
create table if not exists posts (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  user_id uuid references profiles(id),
  title text,
  content text,
  image_url text
);

-- Marketplace Table
create table if not exists marketplace (
  id uuid primary key default uuid_generate_v4(),
  created_at timestamptz default now(),
  user_id uuid references profiles(id),
  title text,
  description text,
  price numeric,
  image_url text
);

-- Notifications Table
create table if not exists notifications (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references profiles(id),
  title text,
  body text,
  is_read boolean default false,
  created_at timestamptz default now()
);

-- Messages Table
create table if not exists messages (
  id uuid primary key default uuid_generate_v4(),
  sender_id uuid references profiles(id),
  receiver_id uuid references profiles(id),
  content text,
  is_read boolean default false,
  created_at timestamptz default now()
);

-- ========== ENABLE RLS ==========
alter table profiles enable row level security;
alter table posts enable row level security;
alter table marketplace enable row level security;
alter table notifications enable row level security;
alter table messages enable row level security;

-- ========== POLICIES ==========

-- Profiles Policies
drop policy if exists "Allow users to update their own profile" on profiles;
drop policy if exists "Allow users to view all profiles" on profiles;
drop policy if exists "Allow users to insert their own profile" on profiles;

create policy "Allow users to update their own profile"
  on profiles for update using (auth.uid() = id);

create policy "Allow users to view all profiles"
  on profiles for select using (true);

create policy "Allow users to insert their own profile"
  on profiles for insert with check (auth.uid() = id);

-- Posts Policies
drop policy if exists "Allow anyone to read posts" on posts;
drop policy if exists "Allow users to insert posts" on posts;
drop policy if exists "Allow users to update their own posts" on posts;
drop policy if exists "Allow users to delete their own posts" on posts;

create policy "Allow anyone to read posts"
  on posts for select using (true);

create policy "Allow users to insert posts"
  on posts for insert with check (auth.uid() = user_id);

create policy "Allow users to update their own posts"
  on posts for update using (auth.uid() = user_id);

create policy "Allow users to delete their own posts"
  on posts for delete using (auth.uid() = user_id);

-- Marketplace Policies
drop policy if exists "Allow anyone to view marketplace" on marketplace;
drop policy if exists "Allow users to insert items" on marketplace;
drop policy if exists "Allow users to update their own items" on marketplace;
drop policy if exists "Allow users to delete their own items" on marketplace;

create policy "Allow anyone to view marketplace"
  on marketplace for select using (true);

create policy "Allow users to insert items"
  on marketplace for insert with check (auth.uid() = user_id);

create policy "Allow users to update their own items"
  on marketplace for update using (auth.uid() = user_id);

create policy "Allow users to delete their own items"
  on marketplace for delete using (auth.uid() = user_id);

-- Notifications Policies
drop policy if exists "Users can read their notifications" on notifications;
create policy "Users can read their notifications"
  on notifications for select using (user_id = auth.uid());

-- Messages Policies
drop policy if exists "Allow users to insert messages" on messages;
drop policy if exists "Allow users to update their own sent messages" on messages;
drop policy if exists "Allow users to delete their own sent messages" on messages;
drop policy if exists "Allow users to view their messages" on messages;

create policy "Allow users to insert messages"
  on messages for insert with check (auth.uid() = sender_id);

create policy "Allow users to update their own sent messages"
  on messages for update using (auth.uid() = sender_id);

create policy "Allow users to delete their own sent messages"
  on messages for delete using (auth.uid() = sender_id);

create policy "Allow users to view their messages"
  on messages for select using (auth.uid() = sender_id OR auth.uid() = receiver_id);

-- ========== END ==========

-- Enable RLS and allow profile owner to update own profile
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow profile owner to update own profile"
  ON profiles
  FOR UPDATE
  USING (auth.uid() = id);

